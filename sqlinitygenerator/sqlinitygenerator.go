package sqlinitygenerator

import (
	"fmt"
	"os"
	"path/filepath"
	"strings"
	"text/template"

	"github.com/mwac-dev/sqlinity/sqlinitytypes"
)

const migrationTemplate = `// AUTO GENERATED BY SQLINITY - DO NOT EDIT MANUALLY
	namespace {{.Namespace}} {
	public static class Migration_{{.ID}}_{{.SafeName}} {
		public static string Name => "{{.ID}}_{{.Name}}";
		public static string Up => @"{{.UpSQL}}";	
		public static string Down => @"{{.DownSQL}}";
	}
}
`

// will strip and replace any invalid characters for C# identifiers replacing "-" or "." with "_"
func safeName(name string) string {
	return strings.NewReplacer("-", "_", ".", "_").Replace(name)
}

func GenerateMigrations(config sqlinitytypes.Config, migrations []sqlinitytypes.Migration) error {
	if err := os.MkdirAll(config.OutputFolder, os.ModePerm); err != nil {
		return fmt.Errorf("failed to create output folder: %w", err)
	}
	template, err := template.New("migration").Parse(migrationTemplate)
	if err != nil {
		return fmt.Errorf("failed to parse template: %w", err)
	}

	for _, migration := range migrations {
		fileName := fmt.Sprintf("Migration_%s_%s.cs", migration.ID, safeName(migration.Name))
		filePath := filepath.Join(config.OutputFolder, fileName)

		file, err := os.Create(filePath)
		if err != nil {
			return fmt.Errorf("failed to create file %s: %w", filePath, err)
		}
		defer file.Close()

		err = template.Execute(file, struct {
			ID        string
			Name      string
			SafeName  string
			UpSQL     string
			DownSQL   string
			Namespace string
		}{
			ID:        migration.ID,
			Name:      migration.Name,
			SafeName:  safeName(migration.Name),
			UpSQL:     migration.UpSQL,
			DownSQL:   migration.DownSQL,
			Namespace: config.Namespace,
		})
		if err != nil {
			return fmt.Errorf("failed to execute template for %s: %w", filePath, err)
		}

		fmt.Printf("Generated migration file: %s\n", filePath)

	}

	return nil
}
